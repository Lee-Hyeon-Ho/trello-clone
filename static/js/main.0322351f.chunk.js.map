{"version":3,"sources":["atoms.tsx","Components/DraggableCard.tsx","Components/Board.tsx","App.tsx","index.tsx","theme.ts"],"names":["toDoState","atom","key","default","Doing","Done","Card","styled","div","props","isDragging","theme","cardColor","DraggableCard","toDoId","toDoText","index","draggableId","magic","snapshot","ref","innerRef","draggableProps","dragHandleProps","React","memo","Wrapper","boardColor","Title","h2","Area","isDraggingOver","isDraggingFromThis","Form","form","Board","toDos","boardId","setToDos","useSetRecoilState","useForm","register","setValue","handleSubmit","onSubmit","toDo","newToDo","id","Date","now","text","allBoards","required","type","placeholder","droppableId","info","Boolean","draggingFromThisWith","droppableProps","map","Boards","App","useRecoilState","onDragEnd","destination","source","boardCopy","taskObj","splice","sourceBoardCopy","destinationBoardCopy","Object","keys","GlobalStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0322351f.chunk.js","sourcesContent":["import { atom } from 'recoil'\r\n\r\nexport interface IToDo {\r\n  id: number\r\n  text: string\r\n}\r\n\r\ninterface IToDoState {\r\n  [key: string]: IToDo[]\r\n}\r\n\r\nexport const toDoState = atom<IToDoState>({\r\n  key: 'toDo',\r\n  default: {\r\n    'To Do': [],\r\n    Doing: [],\r\n    Done: [],\r\n  },\r\n})\r\n","import React from 'react'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\nimport styled from 'styled-components'\r\n\r\nconst Card = styled.div<{ isDragging: boolean }>`\r\n  border-radius: 5px;\r\n  margin-bottom: 5px;\r\n  padding: 10px;\r\n  background-color: ${(props) =>\r\n    props.isDragging ? '#74b9ff' : props.theme.cardColor};\r\n  box-shadow: ${(props) =>\r\n    props.isDragging ? '0px 2px 5px rgba(0, 0, 0, 0.05)' : 'none'};\r\n`\r\n\r\ninterface IDraggableCardProps {\r\n  toDoId: number\r\n  toDoText: string\r\n  index: number\r\n}\r\n\r\nfunction DraggableCard({ toDoId, toDoText, index }: IDraggableCardProps) {\r\n  return (\r\n    <Draggable key={toDoId} draggableId={toDoId + ''} index={index}>\r\n      {(magic, snapshot) => (\r\n        <Card\r\n          isDragging={snapshot.isDragging}\r\n          ref={magic.innerRef}\r\n          {...magic.draggableProps}\r\n          {...magic.dragHandleProps}\r\n        >\r\n          {toDoText}\r\n        </Card>\r\n      )}\r\n    </Draggable>\r\n  )\r\n}\r\n\r\nexport default React.memo(DraggableCard)\r\n","import { Droppable } from 'react-beautiful-dnd'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useSetRecoilState } from 'recoil'\r\nimport styled from 'styled-components'\r\nimport { IToDo, toDoState } from '../atoms'\r\nimport DraggableCard from './DraggableCard'\r\n\r\nconst Wrapper = styled.div`\r\n  width: 300px;\r\n  padding-top: 10px;\r\n  background-color: ${(props) => props.theme.boardColor};\r\n  border-radius: 5px;\r\n  min-height: 300px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`\r\n\r\nconst Title = styled.h2`\r\n  text-align: center;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  font-size: 18px;\r\n`\r\n\r\ninterface IAreaProps {\r\n  isDraggingFromThis: boolean\r\n  isDraggingOver: boolean\r\n}\r\n\r\nconst Area = styled.div<IAreaProps>`\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? '#b2bec3'\r\n      : props.isDraggingFromThis\r\n      ? '#dfe6e9'\r\n      : 'transparent'};\r\n  flex-grow: 1;\r\n  transition: background-color 0.3s ease-in-out;\r\n  padding: 20px;\r\n`\r\n\r\nconst Form = styled.form`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  padding-bottom: 10px;\r\n  input {\r\n    font-size: 16px;\r\n    border: 0;\r\n    background-color: white;\r\n    width: 80%;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    text-align: center;\r\n    margin: 0 auto;\r\n  }\r\n`\r\n\r\ninterface IBoardProps {\r\n  toDos: IToDo[]\r\n  boardId: string\r\n}\r\n\r\ninterface IForm {\r\n  toDo: string\r\n}\r\n\r\nfunction Board({ toDos, boardId }: IBoardProps) {\r\n  const setToDos = useSetRecoilState(toDoState)\r\n  const { register, setValue, handleSubmit } = useForm<IForm>()\r\n  const onValid = ({ toDo }: IForm) => {\r\n    const newToDo = {\r\n      id: Date.now(),\r\n      text: toDo,\r\n    }\r\n    setToDos((allBoards) => {\r\n      return {\r\n        ...allBoards,\r\n        [boardId]: [...allBoards[boardId], newToDo],\r\n      }\r\n    })\r\n    setValue('toDo', '')\r\n  }\r\n  return (\r\n    <Wrapper>\r\n      <Title>{boardId}</Title>\r\n      <Form onSubmit={handleSubmit(onValid)}>\r\n        <input\r\n          {...register('toDo', { required: true })}\r\n          type=\"text\"\r\n          placeholder={`Add task on ${boardId}`}\r\n        />\r\n      </Form>\r\n      <Droppable droppableId={boardId}>\r\n        {(magic, info) => (\r\n          <Area\r\n            isDraggingOver={info.isDraggingOver}\r\n            isDraggingFromThis={Boolean(info.draggingFromThisWith)}\r\n            ref={magic.innerRef}\r\n            {...magic.droppableProps}\r\n          >\r\n            {toDos.map((toDo, index) => (\r\n              <DraggableCard\r\n                key={toDo.id}\r\n                toDoId={toDo.id}\r\n                toDoText={toDo.text}\r\n                index={index}\r\n              />\r\n            ))}\r\n            {magic.placeholder}\r\n          </Area>\r\n        )}\r\n      </Droppable>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Board\r\n","import { DragDropContext, DropResult } from 'react-beautiful-dnd'\nimport { useRecoilState } from 'recoil'\nimport styled from 'styled-components'\nimport { toDoState } from './atoms'\nimport Board from './Components/Board'\n\nconst Wrapper = styled.div`\n  display: flex;\n  width: 100vw;\n  margin: 0 auto;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`\n\nconst Boards = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  gap: 10px;\n`\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(toDoState)\n  const onDragEnd = (info: DropResult) => {\n    const { destination, source } = info\n    if (!destination) return\n\n    if (destination?.droppableId === source.droppableId) {\n      setToDos((allBoards) => {\n        const boardCopy = [...allBoards[source.droppableId]]\n        const taskObj = boardCopy[source.index]\n        boardCopy.splice(source.index, 1)\n        boardCopy.splice(destination.index, 0, taskObj)\n        return {\n          ...allBoards,\n          [source.droppableId]: boardCopy,\n        }\n      })\n    }\n\n    if (destination.droppableId !== source.droppableId) {\n      setToDos((allBoards) => {\n        const sourceBoardCopy = [...allBoards[source.droppableId]]\n        const taskObj = sourceBoardCopy[source.index]\n        const destinationBoardCopy = [...allBoards[destination.droppableId]]\n        sourceBoardCopy.splice(source.index, 1)\n        destinationBoardCopy.splice(destination.index, 0, taskObj)\n        return {\n          ...allBoards,\n          [source.droppableId]: sourceBoardCopy,\n          [destination.droppableId]: destinationBoardCopy,\n        }\n      })\n    }\n  }\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Wrapper>\n        <Boards>\n          {Object.keys(toDos).map((boardId) => (\n            <Board key={boardId} boardId={boardId} toDos={toDos[boardId]} />\n          ))}\n        </Boards>\n      </Wrapper>\n    </DragDropContext>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { RecoilRoot } from 'recoil'\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\nimport { darkTheme } from './theme'\nimport App from './App'\n\nconst GlobalStyle = createGlobalStyle`\n@import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n\tmargin: 0;\n\tpadding: 0;\n\tborder: 0;\n\tfont-size: 100%;\n\tfont: inherit;\n\tvertical-align: baseline;\n}\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n\tdisplay: block;\n}\nbody {\n\tline-height: 1;\n}\nol, ul {\n\tlist-style: none;\n}\nblockquote, q {\n\tquotes: none;\n}\nblockquote:before, blockquote:after,\nq:before, q:after {\n\tcontent: '';\n\tcontent: none;\n}\ntable {\n\tborder-collapse: collapse;\n\tborder-spacing: 0;\n}\n* {\n  box-sizing: border-box;\n}\nbody {\n  font-weight: 300;\n  font-family: 'Source Sans Pro', sans-serif;\n  background-color: ${(props) => props.theme.bgColor};\n  color: black;\n  line-height: 1.2;\n}\na {\n  text-decoration: none;\n  color: inherit;\n}\n`\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import { DefaultTheme } from 'styled-components'\r\n\r\nexport const darkTheme: DefaultTheme = {\r\n  bgColor: '#3f8cf2',\r\n  boardColor: '#dadfe9',\r\n  cardColor: 'white',\r\n}\r\n"],"sourceRoot":""}